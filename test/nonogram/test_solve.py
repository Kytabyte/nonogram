import numpy as np
import pytest

import nonogram as ng


def _do_simple_solve(rows, cols, mat=None):
    return ng.solve(rows, cols, mat)


def _do_solve_with_solver(rows, cols, mat=None):
    solver = ng.solver.Solver(rows, cols, mat)
    return solver.solve(), solver


def _do_check_correctness(rows, cols, mat):
    assert np.all(mat != -1)
    nrow, ncol = mat.shape
    assert len(rows) == nrow, len(cols) == ncol

    def _get_pattern(line):
        pat = []
        prev = 0
        for x in line:
            if x == 0 and prev > 0:
                pat.append(prev)
                prev = 0
            elif x == 1:
                prev += 1
        if prev > 0:
            pat.append(prev)
        return pat

    for i, row in enumerate(mat):
        assert rows[i] == _get_pattern(row)

    for j, col in enumerate(mat.T):
        assert cols[j] == _get_pattern(col)


def _do_check_stat():
    pass


def test_mat_shape():
    rows = [[], []]
    cols = [[], [], []]
    mat = np.zeros((3, 3))
    with pytest.raises(RuntimeError):
        solver = ng.solve(rows, cols, mat)


# simple test, no stat check
def test_10x10_1():
    rows = [[4], [3, 3], [2, 1], [2, 2], [1, 2, 3], [2, 3], [4, 1], [10], [8], [4]]
    cols = [[6], [3, 4], [1, 1, 3], [2, 1, 4], [1, 1, 3], [1, 1, 3], [2, 2, 3], [1, 1, 2], [1, 2, 2], [2, 2]]
    _do_check_correctness(rows, cols, _do_simple_solve(rows, cols))


def test_15x15_1():
    rows = [
        [3], [1], [1], [1, 5], [5, 3, 3],
        [5, 3, 1], [5, 3, 1, 1], [5, 5, 2], [2, 1, 2, 1, 1], [1, 1, 1, 2, 3],
        [1, 1, 1, 2, 2], [1, 1, 2, 3, 2], [1, 1, 1, 2, 2], [4, 1, 2, 2], [7, 2]
    ]
    cols = [
        [1, 4, 1, 1, 1], [1, 4, 1, 2], [9, 1], [10], [4],
        [4], [1, 5, 1], [5, 1], [5, 1], [9, 1],
        [1, 8], [4], [6], [1, 1, 6], [1, 1, 7]
    ]
    _do_check_correctness(rows, cols, _do_simple_solve(rows, cols))


def test_15x20_1():
    rows = [
        [4], [2, 2, 5], [3, 1, 3, 3], [2, 1, 2, 2], [1, 2, 1, 2],
        [2, 3, 1], [2, 1, 1, 1, 2], [2, 2, 1, 1, 1, 1], [4, 2, 1, 2, 1, 1], [1, 1, 4, 1, 1, 2, 1],
        [1, 1, 3, 3, 2, 1], [2, 1, 3, 1, 3, 1, 2], [1, 1, 1, 1, 1, 1, 1, 1], [1, 3, 1, 1, 1, 1, 1, 1], [4, 3, 3, 2]
    ]

    cols = [
        [2, 1, 2, 1], [3, 3, 4], [1, 2, 5, 1], [1, 3, 1, 1], [2, 3, 3],
        [4, 2, 1, 1], [2, 2, 3], [2, 1, 1], [3, 3], [2, 4, 2],
        [2, 3, 1], [2, 1, 2], [1, 5], [1, 3, 2, 2], [2, 4, 1],
        [1, 2], [2, 4], [2, 3, 1], [3, 2, 1], [6, 2]
    ]
    _do_check_correctness(rows, cols, _do_simple_solve(rows, cols))


def test_20x15_1():
    rows = [
        [2, 1, 2, 1], [3, 3, 4], [1, 2, 5, 1], [1, 3, 1, 1], [2, 3, 3],
        [4, 2, 1, 1], [2, 2, 3], [2, 1, 1], [3, 3], [2, 4, 2],
        [2, 3, 1], [2, 1, 2], [1, 5], [1, 3, 2, 2], [2, 4, 1],
        [1, 2], [2, 4], [2, 3, 1], [3, 2, 1], [6, 2]
    ]
    cols = [
        [4], [2, 2, 5], [3, 1, 3, 3], [2, 1, 2, 2], [1, 2, 1, 2],
        [2, 3, 1], [2, 1, 1, 1, 2], [2, 2, 1, 1, 1, 1], [4, 2, 1, 2, 1, 1], [1, 1, 4, 1, 1, 2, 1],
        [1, 1, 3, 3, 2, 1], [2, 1, 3, 1, 3, 1, 2], [1, 1, 1, 1, 1, 1, 1, 1], [1, 3, 1, 1, 1, 1, 1, 1], [4, 3, 3, 2]
    ]
    _do_check_correctness(rows, cols, _do_simple_solve(rows, cols))


# test backtrack
def test_45x45_1():
    rows = [
        [9], [15], [19], [23], [25],
        [3, 24], [3, 26], [3, 9, 15], [3, 8, 15], [2, 8, 14],
        [2, 8, 15], [2, 8, 16], [2, 9, 17], [2, 10, 19], [2, 31],
        [2, 32], [2, 32], [2, 31], [2, 31], [2, 30],
        [2, 29], [2, 28], [2, 26], [2, 19], [2, 17],
        [2, 16], [2, 15], [2, 13], [2, 12], [2, 4, 12],
        [2, 6, 11], [2, 8, 10], [2, 8, 9], [2, 8, 9], [2, 8, 8],
        [2, 6, 7], [3, 4, 8], [3, 7], [3, 6], [3, 6],
        [3, 4], [4, 4], [5, 5], [15], [9]
    ]

    cols = [
        [9], [15], [5, 5], [4, 4], [3, 3],
        [3, 3], [3, 3], [3, 3], [3, 3], [2, 2],
        [2, 2], [2, 5, 2], [2, 11, 2], [16, 2], [17, 2],
        [19, 2], [20, 2], [21, 2], [22, 2], [9, 11, 4, 2],
        [8, 10, 6, 2], [7, 9, 8, 2], [7, 9, 8, 2], [7, 9, 8, 2], [8, 10, 8, 2],
        [9, 11, 6, 2], [24, 4, 2], [23, 2], [24, 2], [25, 2],
        [25, 2], [26, 4], [28, 6], [39], [37],
        [35], [35], [33], [31], [29],
        [25], [23], [19], [15], [9]
    ]
    _do_check_correctness(rows, cols, _do_simple_solve(rows, cols))


def test_50x32_1():
    rows = [
        [9], [14], [18], [23], [26],
        [27], [28], [29], [30], [30],
        [31], [2, 12, 14], [1, 13, 13], [13, 11], [13, 7],
        [14, 5], [14, 1], [14, 1], [13, 3, 1], [13, 2, 2, 3],
        [13, 2, 2, 1], [5, 3, 1, 1, 1, 1], [4, 3, 2, 2], [2, 1, 3, 4, 3], [4, 1, 3, 5, 3, 1],
        [8, 1, 3, 3, 1], [7, 1, 4, 2, 1], [5, 1, 3, 3], [5, 1, 1, 2], [4, 2, 1],
        [4, 2, 2], [4, 1, 2, 1], [4, 3, 1], [3, 3, 1], [3, 1, 2],
        [2, 1, 7], [2, 1, 3, 2], [1, 2, 2, 1], [1, 2, 1, 1], [1, 1],
        [2, 1], [2], [3, 1], [6, 2], [10, 3],
        [18], [13], [15], [16], [17]
    ]

    cols = [
        [9, 14], [9, 12], [9, 10], [9, 8], [17, 5, 1],
        [20, 3, 2], [26, 3], [25, 3], [23, 4], [30, 5],
        [22, 2, 4, 6], [21, 2, 2, 7], [21, 3, 8], [21, 2, 1, 8], [29, 8],
        [28, 7], [11, 15, 7], [11, 6, 6], [11, 6], [11, 1, 6],
        [11, 2, 3, 2, 5], [11, 1, 3, 2, 1], [11, 2, 3, 1, 1], [12, 2, 3, 2, 1], [12, 2, 2, 1, 1],
        [12, 1, 2, 1, 1], [11, 2, 1, 2], [10, 2, 1, 1, 2, 1, 1], [9, 2, 2, 2, 1, 2, 2], [7, 4, 3, 2, 6, 3],
        [4, 5, 4, 1, 3], [3, 4]
    ]
    _do_check_correctness(rows, cols, _do_simple_solve(rows, cols))
